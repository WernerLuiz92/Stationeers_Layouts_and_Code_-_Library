<?xml version="1.0" encoding="utf-8"?>
<InstructionData xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <DateTime>133643204527262018</DateTime>
  <GameVersion>0.2.5025.22811</GameVersion>
  <Title>SEP_-_HANGAR_DOORS_CONTROLLER</Title>
  <Description>â€‹</Description>
  <Author>D4RK GH0ST</Author>
  <WorkshopFileHandle>0</WorkshopFileHandle>
  <Instructions>alias STATION d0
alias LEVER d1
#alias DISPLAY1 d2
#alias DISPLAY2 d3
alias MEMORY d4

alias NextEvent r10
alias EventState r11
alias DoorState r12
alias LeverState r13
#alias DisplayColor r14

define DoorsHash -1351081801
define NoEvent 0
define ImminentEvent 60
define TimeToOpenDoors 1
define OpenDoors 1
define ClosedDoors 0

main:
 # Carrega o estado da Alavanca
 l LeverState LEVER Open
 # Carrega o valor do proximo evento
 l NextEvent STATION NextWeatherEventTime
 # Verifica o status atual do evento
 l EventState STATION Mode

 # Verifica se existe alerta de evento proximo
  # Se NextEvent &gt; 0, vai para checkEvent
  bgt NextEvent NoEvent checkEvent
  beq EventState 2 checkEvent
 # Caso contrario, pula para openDoors
j openDoors

checkEvent:
 yield
 beq EventState 2 main
 # Muda as cores do display para Orange
# move DisplayColor 3
## jal setDisplay

 # Verifica se falta menos de ImminentEvent segundos para o evento
  # Se NextEvent &lt; ImminentEvent, vai para closeDoors
 blt NextEvent ImminentEvent closeDoors
 # Caso contrario, pula para openDoors
j main

closeDoors:
 # Se LeverState != 0, pula 3 linhas
 brnez LeverState 3
 # Se DoorState == 0, vai para main
 beq DoorState ClosedDoors main

 # Define DoorState como 0 (fechado)
 move DoorState ClosedDoors
 # Muda as cores dos displays para Red
# move DisplayColor 4
# jal setDisplay
j setDoorsState

openDoors:
 # Se LeverState == 0, pula 3 linhas
 breqz LeverState 3

 # Se o estado da Alavanca for diferente de 0,
 # vai para closeDoors
 bnez LeverState closeDoors

 # Se DoorState == 1, vai para main
 beq DoorState OpenDoors main

 sleep TimeToOpenDoors
 # Define DoorState como 1 (aberto)
 move DoorState OpenDoors
 # Muda as cores dos displays para Green
# move DisplayColor 2
# jal setDisplay
j setDoorsState

setDoorsState:
 sb DoorsHash Open DoorState
 s MEMORY Setting DoorState
j main # Volta para o inicio

#setDisplay:
# s DISPLAY1 Setting NextEvent
# s DISPLAY2 Setting EventState
# s DISPLAY1 Color DisplayColor
# s DISPLAY2 Color DisplayColor
#j ra</Instructions>
</InstructionData>